
# Additional procs with user specified bodies to compute parameter values.
proc gen_USERPARAMETER_S_PACKET_LENGTH_ENABLEMENT {} {expr S_TLAST_GEN == true}
proc gen_USERPARAMETER_S_TLAST_EN_ENABLEMENT {} {expr (S_TLAST_GEN == false && S_TLAST_PROP == false && M_TLAST_PROP == false)}
proc gen_USERPARAMETER_M_TLAST_PROP_ENABLEMENT {} {expr M_TLAST_GEN == false and M_TLAST_EN == false}
proc gen_USERPARAMETER_M_PACKET_LENGTH_ENABLEMENT {} {expr M_TLAST_GEN == true}
proc gen_USERPARAMETER_M_TLAST_EN_ENABLEMENT {} {expr( M_TLAST_GEN == false && M_TLAST_PROP == false && S_TLAST_PROP == false)}
proc gen_USERPARAMETER_C_M_AXIS_TUSER_WIDTH_ENABLEMENT {} {expr  M_TUSER_EN == true}
proc gen_USERPARAMETER_S_TLAST_GEN_ENABLEMENT {} {expr S_TLAST_EN == false and S_TLAST_PROP == false and M_TLAST_PROP == false}
proc gen_USERPARAMETER_M_TLAST_GEN_ENABLEMENT {} {expr M_TLAST_EN == false and M_TLAST_PROP == false and S_TLAST_PROP == false}
proc gen_USERPARAMETER_C_S_AXIS_TUSER_WIDTH_ENABLEMENT {} {expr S_TUSER_EN == true}
proc gen_USERPARAMETER_SAMPLE_FREQ_ENABLEMENT {} {expr CLOCK_CONV_EN == true}
proc gen_USERPARAMETER_SYSTEM_CLK_FREQ_ENABLEMENT {} {expr( CLOCK_CONV_EN == true)}
proc gen_USERPARAMETER_S_TLAST_PROP_ENABLEMENT {} {expr S_TLAST_GEN == false and S_TLAST_EN == false}

# Definitional proc to organize widgets for parameters.
proc init_gui { IPINST } {
  ipgui::add_param $IPINST -name "Component_Name"
  #Adding Page
  set Input_interface [ipgui::add_page $IPINST -name "Input interface" -display_name {Input Interface}]
  #Adding Group
  set Bus_(TDATA) [ipgui::add_group $IPINST -name "Bus (TDATA)" -parent ${Input_interface} -display_name {Inbound Bus (TDATA)}]
  ipgui::add_param $IPINST -name "C_S00_AXIS_TDATA_WIDTH" -parent ${Bus_(TDATA)} -widget comboBox
  #Adding Group
  set Options [ipgui::add_group $IPINST -name "Options" -parent ${Bus_(TDATA)} -display_name {Inbound Options}]
  ipgui::add_param $IPINST -name "S_TSTRB_EN" -parent ${Options}
  #Adding Group
  set User_bus [ipgui::add_group $IPINST -name "User bus" -parent ${Options} -display_name {Inbound User Bus} -layout horizontal]
  ipgui::add_param $IPINST -name "S_TUSER_EN" -parent ${User_bus}
  ipgui::add_param $IPINST -name "C_S_AXIS_TUSER_WIDTH" -parent ${User_bus} -widget comboBox

  #Adding Group
  set Packet_Options [ipgui::add_group $IPINST -name "Packet Options" -parent ${Options} -display_name {Inbound Packet Options}]
  ipgui::add_param $IPINST -name "S_TLAST_PROP" -parent ${Packet_Options}
  ipgui::add_param $IPINST -name "S_TLAST_EN" -parent ${Packet_Options}
  #Adding Group
  set TLAST_generate [ipgui::add_group $IPINST -name "TLAST generate" -parent ${Packet_Options} -layout horizontal]
  ipgui::add_param $IPINST -name "S_TLAST_GEN" -parent ${TLAST_generate}
  ipgui::add_param $IPINST -name "S_PACKET_LENGTH" -parent ${TLAST_generate}




  #Adding Group
  set Data_Flow [ipgui::add_group $IPINST -name "Data Flow" -parent ${Input_interface} -display_name {Inbound Data Flow}]
  ipgui::add_param $IPINST -name "C_S_FIFO_DEPTH" -parent ${Data_Flow}
  ipgui::add_param $IPINST -name "C_S_READ_f_FIFO_START_COUNT" -parent ${Data_Flow}


  #Adding Page
  set ECG_unit [ipgui::add_page $IPINST -name "ECG unit" -display_name {ECG Unit}]
  #Adding Group
  set Clock [ipgui::add_group $IPINST -name "Clock" -parent ${ECG_unit}]
  ipgui::add_param $IPINST -name "CLOCK_CONV_EN" -parent ${Clock}
  ipgui::add_param $IPINST -name "SYSTEM_CLK_FREQ" -parent ${Clock}
  ipgui::add_param $IPINST -name "SAMPLE_FREQ" -parent ${Clock}


  #Adding Page
  set Statistics_bus [ipgui::add_page $IPINST -name "Statistics bus"]
  set_property tooltip {Access the ECG analysis registers through this port.} ${Statistics_bus}
  set C_S00_AXI_DATA_WIDTH [ipgui::add_param $IPINST -name "C_S00_AXI_DATA_WIDTH" -parent ${Statistics_bus}]
  set_property tooltip {Bus width in bits} ${C_S00_AXI_DATA_WIDTH}

  #Adding Page
  set Page_0 [ipgui::add_page $IPINST -name "Page 0" -display_name {Output Interface}]
  #Adding Group
  set Bus [ipgui::add_group $IPINST -name "Bus" -parent ${Page_0} -display_name {Outbound Bus (TDATA)}]
  ipgui::add_param $IPINST -name "C_M00_AXIS_TDATA_WIDTH" -parent ${Bus} -widget comboBox
  #Adding Group
  set Options_Outbound [ipgui::add_group $IPINST -name "Options Outbound" -parent ${Bus} -display_name {Outbound Options}]
  ipgui::add_param $IPINST -name "M_TSTRB_EN" -parent ${Options_Outbound}
  #Adding Group
  set Outbound_User_Bus [ipgui::add_group $IPINST -name "Outbound User Bus" -parent ${Options_Outbound} -layout horizontal]
  ipgui::add_param $IPINST -name "M_TUSER_EN" -parent ${Outbound_User_Bus}
  ipgui::add_param $IPINST -name "C_M_AXIS_TUSER_WIDTH" -parent ${Outbound_User_Bus} -widget comboBox

  #Adding Group
  set Outbound_Packet_Options [ipgui::add_group $IPINST -name "Outbound Packet Options" -parent ${Options_Outbound}]
  ipgui::add_param $IPINST -name "M_TLAST_PROP" -parent ${Outbound_Packet_Options}
  ipgui::add_param $IPINST -name "M_TLAST_EN" -parent ${Outbound_Packet_Options}
  #Adding Group
  set TLAST_Generate [ipgui::add_group $IPINST -name "TLAST Generate" -parent ${Outbound_Packet_Options} -layout horizontal]
  ipgui::add_param $IPINST -name "M_TLAST_GEN" -parent ${TLAST_Generate}
  ipgui::add_param $IPINST -name "M_PACKET_LENGTH" -parent ${TLAST_Generate}




  #Adding Group
  set Outbound_Data_Flow [ipgui::add_group $IPINST -name "Outbound Data Flow" -parent ${Page_0}]
  ipgui::add_param $IPINST -name "C_M_FIFO_DEPTH" -parent ${Outbound_Data_Flow}
  ipgui::add_param $IPINST -name "C_M00_AXIS_START_COUNT" -parent ${Outbound_Data_Flow}



}

proc update_PARAM_VALUE.CLOCK_CONV_EN { PARAM_VALUE.CLOCK_CONV_EN } {
	# Procedure called to update CLOCK_CONV_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.CLOCK_CONV_EN { PARAM_VALUE.CLOCK_CONV_EN } {
	# Procedure called to validate CLOCK_CONV_EN
	return true
}

proc update_PARAM_VALUE.C_M_AXIS_TUSER_WIDTH { PARAM_VALUE.C_M_AXIS_TUSER_WIDTH } {
	# Procedure called to update C_M_AXIS_TUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_M_AXIS_TUSER_WIDTH { PARAM_VALUE.C_M_AXIS_TUSER_WIDTH } {
	# Procedure called to validate C_M_AXIS_TUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_M_FIFO_DEPTH { PARAM_VALUE.C_M_FIFO_DEPTH } {
	# Procedure called to update C_M_FIFO_DEPTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_M_FIFO_DEPTH { PARAM_VALUE.C_M_FIFO_DEPTH } {
	# Procedure called to validate C_M_FIFO_DEPTH
	return true
}

proc update_PARAM_VALUE.C_S00_AXI_DATA_WIDTH { PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to update C_S00_AXI_DATA_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXI_DATA_WIDTH { PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to validate C_S00_AXI_DATA_WIDTH
	return true
}

proc update_PARAM_VALUE.C_S_AXIS_TUSER_WIDTH { PARAM_VALUE.C_S_AXIS_TUSER_WIDTH } {
	# Procedure called to update C_S_AXIS_TUSER_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S_AXIS_TUSER_WIDTH { PARAM_VALUE.C_S_AXIS_TUSER_WIDTH } {
	# Procedure called to validate C_S_AXIS_TUSER_WIDTH
	return true
}

proc update_PARAM_VALUE.C_S_FIFO_DEPTH { PARAM_VALUE.C_S_FIFO_DEPTH } {
	# Procedure called to update C_S_FIFO_DEPTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S_FIFO_DEPTH { PARAM_VALUE.C_S_FIFO_DEPTH } {
	# Procedure called to validate C_S_FIFO_DEPTH
	return true
}

proc update_PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT { PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT } {
	# Procedure called to update C_S_READ_f_FIFO_START_COUNT when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT { PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT } {
	# Procedure called to validate C_S_READ_f_FIFO_START_COUNT
	return true
}

proc update_PARAM_VALUE.M_PACKET_LENGTH { PARAM_VALUE.M_PACKET_LENGTH } {
	# Procedure called to update M_PACKET_LENGTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_PACKET_LENGTH { PARAM_VALUE.M_PACKET_LENGTH } {
	# Procedure called to validate M_PACKET_LENGTH
	return true
}

proc update_PARAM_VALUE.M_TLAST_EN { PARAM_VALUE.M_TLAST_EN } {
	# Procedure called to update M_TLAST_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_TLAST_EN { PARAM_VALUE.M_TLAST_EN } {
	# Procedure called to validate M_TLAST_EN
	return true
}

proc update_PARAM_VALUE.M_TLAST_GEN { PARAM_VALUE.M_TLAST_GEN } {
	# Procedure called to update M_TLAST_GEN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_TLAST_GEN { PARAM_VALUE.M_TLAST_GEN } {
	# Procedure called to validate M_TLAST_GEN
	return true
}

proc update_PARAM_VALUE.M_TLAST_PROP { PARAM_VALUE.M_TLAST_PROP } {
	# Procedure called to update M_TLAST_PROP when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_TLAST_PROP { PARAM_VALUE.M_TLAST_PROP } {
	# Procedure called to validate M_TLAST_PROP
	return true
}

proc update_PARAM_VALUE.M_TSTRB_EN { PARAM_VALUE.M_TSTRB_EN } {
	# Procedure called to update M_TSTRB_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_TSTRB_EN { PARAM_VALUE.M_TSTRB_EN } {
	# Procedure called to validate M_TSTRB_EN
	return true
}

proc update_PARAM_VALUE.M_TUSER_EN { PARAM_VALUE.M_TUSER_EN } {
	# Procedure called to update M_TUSER_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.M_TUSER_EN { PARAM_VALUE.M_TUSER_EN } {
	# Procedure called to validate M_TUSER_EN
	return true
}

proc update_PARAM_VALUE.SAMPLE_FREQ { PARAM_VALUE.SAMPLE_FREQ } {
	# Procedure called to update SAMPLE_FREQ when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.SAMPLE_FREQ { PARAM_VALUE.SAMPLE_FREQ } {
	# Procedure called to validate SAMPLE_FREQ
	return true
}

proc update_PARAM_VALUE.SYSTEM_CLK_FREQ { PARAM_VALUE.SYSTEM_CLK_FREQ } {
	# Procedure called to update SYSTEM_CLK_FREQ when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.SYSTEM_CLK_FREQ { PARAM_VALUE.SYSTEM_CLK_FREQ } {
	# Procedure called to validate SYSTEM_CLK_FREQ
	return true
}

proc update_PARAM_VALUE.S_PACKET_LENGTH { PARAM_VALUE.S_PACKET_LENGTH } {
	# Procedure called to update S_PACKET_LENGTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_PACKET_LENGTH { PARAM_VALUE.S_PACKET_LENGTH } {
	# Procedure called to validate S_PACKET_LENGTH
	return true
}

proc update_PARAM_VALUE.S_TLAST_EN { PARAM_VALUE.S_TLAST_EN } {
	# Procedure called to update S_TLAST_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_TLAST_EN { PARAM_VALUE.S_TLAST_EN } {
	# Procedure called to validate S_TLAST_EN
	return true
}

proc update_PARAM_VALUE.S_TLAST_GEN { PARAM_VALUE.S_TLAST_GEN } {
	# Procedure called to update S_TLAST_GEN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_TLAST_GEN { PARAM_VALUE.S_TLAST_GEN } {
	# Procedure called to validate S_TLAST_GEN
	return true
}

proc update_PARAM_VALUE.S_TLAST_PROP { PARAM_VALUE.S_TLAST_PROP } {
	# Procedure called to update S_TLAST_PROP when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_TLAST_PROP { PARAM_VALUE.S_TLAST_PROP } {
	# Procedure called to validate S_TLAST_PROP
	return true
}

proc update_PARAM_VALUE.S_TSTRB_EN { PARAM_VALUE.S_TSTRB_EN } {
	# Procedure called to update S_TSTRB_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_TSTRB_EN { PARAM_VALUE.S_TSTRB_EN } {
	# Procedure called to validate S_TSTRB_EN
	return true
}

proc update_PARAM_VALUE.S_TUSER_EN { PARAM_VALUE.S_TUSER_EN } {
	# Procedure called to update S_TUSER_EN when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.S_TUSER_EN { PARAM_VALUE.S_TUSER_EN } {
	# Procedure called to validate S_TUSER_EN
	return true
}

proc update_PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH { PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH } {
	# Procedure called to update C_M00_AXIS_TDATA_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH { PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH } {
	# Procedure called to validate C_M00_AXIS_TDATA_WIDTH
	return true
}

proc update_PARAM_VALUE.C_M00_AXIS_START_COUNT { PARAM_VALUE.C_M00_AXIS_START_COUNT } {
	# Procedure called to update C_M00_AXIS_START_COUNT when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_M00_AXIS_START_COUNT { PARAM_VALUE.C_M00_AXIS_START_COUNT } {
	# Procedure called to validate C_M00_AXIS_START_COUNT
	return true
}

proc update_PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH { PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH } {
	# Procedure called to update C_S00_AXIS_TDATA_WIDTH when any of the dependent parameters in the arguments change
}

proc validate_PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH { PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH } {
	# Procedure called to validate C_S00_AXIS_TDATA_WIDTH
	return true
}


proc update_MODELPARAM_VALUE.S_TSTRB_EN { MODELPARAM_VALUE.S_TSTRB_EN PARAM_VALUE.S_TSTRB_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_TSTRB_EN}] ${MODELPARAM_VALUE.S_TSTRB_EN}
}

proc update_MODELPARAM_VALUE.S_TLAST_EN { MODELPARAM_VALUE.S_TLAST_EN PARAM_VALUE.S_TLAST_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_TLAST_EN}] ${MODELPARAM_VALUE.S_TLAST_EN}
}

proc update_MODELPARAM_VALUE.S_TUSER_EN { MODELPARAM_VALUE.S_TUSER_EN PARAM_VALUE.S_TUSER_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_TUSER_EN}] ${MODELPARAM_VALUE.S_TUSER_EN}
}

proc update_MODELPARAM_VALUE.S_TLAST_GEN { MODELPARAM_VALUE.S_TLAST_GEN PARAM_VALUE.S_TLAST_GEN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_TLAST_GEN}] ${MODELPARAM_VALUE.S_TLAST_GEN}
}

proc update_MODELPARAM_VALUE.S_TLAST_PROP { MODELPARAM_VALUE.S_TLAST_PROP PARAM_VALUE.S_TLAST_PROP } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_TLAST_PROP}] ${MODELPARAM_VALUE.S_TLAST_PROP}
}

proc update_MODELPARAM_VALUE.S_PACKET_LENGTH { MODELPARAM_VALUE.S_PACKET_LENGTH PARAM_VALUE.S_PACKET_LENGTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.S_PACKET_LENGTH}] ${MODELPARAM_VALUE.S_PACKET_LENGTH}
}

proc update_MODELPARAM_VALUE.M_TSTRB_EN { MODELPARAM_VALUE.M_TSTRB_EN PARAM_VALUE.M_TSTRB_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_TSTRB_EN}] ${MODELPARAM_VALUE.M_TSTRB_EN}
}

proc update_MODELPARAM_VALUE.M_TLAST_EN { MODELPARAM_VALUE.M_TLAST_EN PARAM_VALUE.M_TLAST_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_TLAST_EN}] ${MODELPARAM_VALUE.M_TLAST_EN}
}

proc update_MODELPARAM_VALUE.M_TLAST_GEN { MODELPARAM_VALUE.M_TLAST_GEN PARAM_VALUE.M_TLAST_GEN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_TLAST_GEN}] ${MODELPARAM_VALUE.M_TLAST_GEN}
}

proc update_MODELPARAM_VALUE.M_TLAST_PROP { MODELPARAM_VALUE.M_TLAST_PROP PARAM_VALUE.M_TLAST_PROP } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_TLAST_PROP}] ${MODELPARAM_VALUE.M_TLAST_PROP}
}

proc update_MODELPARAM_VALUE.M_PACKET_LENGTH { MODELPARAM_VALUE.M_PACKET_LENGTH PARAM_VALUE.M_PACKET_LENGTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_PACKET_LENGTH}] ${MODELPARAM_VALUE.M_PACKET_LENGTH}
}

proc update_MODELPARAM_VALUE.M_TUSER_EN { MODELPARAM_VALUE.M_TUSER_EN PARAM_VALUE.M_TUSER_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.M_TUSER_EN}] ${MODELPARAM_VALUE.M_TUSER_EN}
}

proc update_MODELPARAM_VALUE.CLOCK_CONV_EN { MODELPARAM_VALUE.CLOCK_CONV_EN PARAM_VALUE.CLOCK_CONV_EN } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.CLOCK_CONV_EN}] ${MODELPARAM_VALUE.CLOCK_CONV_EN}
}

proc update_MODELPARAM_VALUE.SYSTEM_CLK_FREQ { MODELPARAM_VALUE.SYSTEM_CLK_FREQ PARAM_VALUE.SYSTEM_CLK_FREQ } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.SYSTEM_CLK_FREQ}] ${MODELPARAM_VALUE.SYSTEM_CLK_FREQ}
}

proc update_MODELPARAM_VALUE.SAMPLE_FREQ { MODELPARAM_VALUE.SAMPLE_FREQ PARAM_VALUE.SAMPLE_FREQ } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.SAMPLE_FREQ}] ${MODELPARAM_VALUE.SAMPLE_FREQ}
}

proc update_MODELPARAM_VALUE.C_S_FIFO_DEPTH { MODELPARAM_VALUE.C_S_FIFO_DEPTH PARAM_VALUE.C_S_FIFO_DEPTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S_FIFO_DEPTH}] ${MODELPARAM_VALUE.C_S_FIFO_DEPTH}
}

proc update_MODELPARAM_VALUE.C_M_FIFO_DEPTH { MODELPARAM_VALUE.C_M_FIFO_DEPTH PARAM_VALUE.C_M_FIFO_DEPTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_M_FIFO_DEPTH}] ${MODELPARAM_VALUE.C_M_FIFO_DEPTH}
}

proc update_MODELPARAM_VALUE.C_S_AXIS_TUSER_WIDTH { MODELPARAM_VALUE.C_S_AXIS_TUSER_WIDTH PARAM_VALUE.C_S_AXIS_TUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S_AXIS_TUSER_WIDTH}] ${MODELPARAM_VALUE.C_S_AXIS_TUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_M_AXIS_TUSER_WIDTH { MODELPARAM_VALUE.C_M_AXIS_TUSER_WIDTH PARAM_VALUE.C_M_AXIS_TUSER_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_M_AXIS_TUSER_WIDTH}] ${MODELPARAM_VALUE.C_M_AXIS_TUSER_WIDTH}
}

proc update_MODELPARAM_VALUE.C_S_READ_f_FIFO_START_COUNT { MODELPARAM_VALUE.C_S_READ_f_FIFO_START_COUNT PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S_READ_f_FIFO_START_COUNT}] ${MODELPARAM_VALUE.C_S_READ_f_FIFO_START_COUNT}
}

proc update_MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH { MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH PARAM_VALUE.C_S00_AXI_DATA_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S00_AXI_DATA_WIDTH}] ${MODELPARAM_VALUE.C_S00_AXI_DATA_WIDTH}
}

proc update_MODELPARAM_VALUE.C_S00_AXIS_TDATA_WIDTH { MODELPARAM_VALUE.C_S00_AXIS_TDATA_WIDTH PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_S00_AXIS_TDATA_WIDTH}] ${MODELPARAM_VALUE.C_S00_AXIS_TDATA_WIDTH}
}

proc update_MODELPARAM_VALUE.C_M00_AXIS_TDATA_WIDTH { MODELPARAM_VALUE.C_M00_AXIS_TDATA_WIDTH PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_M00_AXIS_TDATA_WIDTH}] ${MODELPARAM_VALUE.C_M00_AXIS_TDATA_WIDTH}
}

proc update_MODELPARAM_VALUE.C_M00_AXIS_START_COUNT { MODELPARAM_VALUE.C_M00_AXIS_START_COUNT PARAM_VALUE.C_M00_AXIS_START_COUNT } {
	# Procedure called to set VHDL generic/Verilog parameter value(s) based on TCL parameter value
	set_property value [get_property value ${PARAM_VALUE.C_M00_AXIS_START_COUNT}] ${MODELPARAM_VALUE.C_M00_AXIS_START_COUNT}
}

